#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ—ó –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∏ DataMCPServerAgent.
–ü–æ–∫–∞–∑—É—î —è–∫ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ –Ω–æ–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é –∫–æ–¥—É.
"""

import asyncio
import sys
from pathlib import Path

# Add app directory to Python path
sys.path.insert(0, str(Path(__file__).parent))

from app.core.config import settings
from app.core.logging import get_logger, set_correlation_id
from app.domain.models.agent import Agent, AgentType, AgentConfiguration, AgentCapability
from app.domain.models.task import Task, TaskType, TaskPriority
from app.domain.services.agent_service import AgentService
from app.infrastructure.repositories.base import InMemoryRepository


logger = get_logger(__name__)


async def demonstrate_new_architecture():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –Ω–æ–≤–æ—ó –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∏."""
    
    # Set correlation ID for request tracing
    set_correlation_id("demo_001")
    
    logger.info("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ—ó –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∏ DataMCPServerAgent")
    
    # 1. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–≥–µ–Ω—Ç–∞ –∑ –Ω–æ–≤–æ—é –¥–æ–º–µ–Ω–Ω–æ—é –º–æ–¥–µ–ª–ª—é
    logger.info("üì¶ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–≥–µ–Ω—Ç–∞...")
    
    # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∞–≥–µ–Ω—Ç–∞
    config = AgentConfiguration(
        max_concurrent_tasks=5,
        timeout_seconds=300,
        memory_limit_mb=512,
        cpu_limit_cores=1.0
    )
    
    # –ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –∞–≥–µ–Ω—Ç–∞
    capabilities = [
        AgentCapability(
            name="data_processing",
            version="1.0.0",
            description="Process and analyze data",
            enabled=True
        ),
        AgentCapability(
            name="email_handling",
            version="1.0.0", 
            description="Send and receive emails",
            enabled=True
        )
    ]
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–≥–µ–Ω—Ç–∞
    agent = Agent(
        name="demo-analytics-agent",
        agent_type=AgentType.ANALYTICS,
        description="–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏–π –∞–≥–µ–Ω—Ç",
        configuration=config,
        capabilities=capabilities
    )
    
    logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ: {agent.name} (ID: {agent.id})")
    
    # 2. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –¥–æ–º–µ–Ω–Ω–∏—Ö –ø–æ–¥—ñ–π
    logger.info("üì° –î–æ–º–µ–Ω–Ω—ñ –ø–æ–¥—ñ—ó:")
    events = agent.clear_domain_events()
    for event in events:
        logger.info(f"  - {event.event_type}: {event.data}")
    
    # 3. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
    logger.info("üìã –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è...")
    
    task = Task(
        name="–ê–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤",
        task_type=TaskType.DATA_ANALYSIS,
        agent_id=agent.id,
        priority=TaskPriority.HIGH,
        description="–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å",
        input_data={
            "dataset": "customers_2024_01",
            "analysis_type": "behavior_patterns",
            "output_format": "json"
        }
    )
    
    logger.info(f"‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ: {task.name} (ID: {task.id})")
    
    # 4. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∏
    logger.info("üîÑ –í–∏–∫–æ–Ω–∞–Ω–Ω—è –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∏...")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –∞–≥–µ–Ω—Ç–∞
    if agent.has_capability("data_processing"):
        logger.info("‚úÖ –ê–≥–µ–Ω—Ç –º–∞—î –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö")
        
        # –ó–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É –∑–∞–≤–¥–∞–Ω–Ω—è
        task.change_status(task.status.__class__.RUNNING)
        logger.info(f"üìä –°—Ç–∞—Ç—É—Å –∑–∞–≤–¥–∞–Ω–Ω—è –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {task.status}")
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
        from app.domain.models.task import TaskProgress
        progress = TaskProgress(
            percentage=50.0,
            current_step="–û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö",
            total_steps=4,
            completed_steps=2
        )
        task.update_progress(progress)
        logger.info(f"üìà –ü—Ä–æ–≥—Ä–µ—Å –∑–∞–≤–¥–∞–Ω–Ω—è: {progress.percentage}%")
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
        result_data = {
            "patterns_found": 15,
            "customer_segments": ["high_value", "regular", "new"],
            "recommendations": [
                "–ó–±—ñ–ª—å—à–∏—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—é –¥–ª—è high_value —Å–µ–≥–º–µ–Ω—Ç—É",
                "–ü–æ–∫—Ä–∞—â–∏—Ç–∏ onboarding –¥–ª—è –Ω–æ–≤–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤"
            ]
        }
        task.complete_successfully(result_data)
        logger.info("‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    # 5. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è
    logger.info("üìà –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è...")
    
    if agent.is_scalable():
        agent.scale_to(3)
        logger.info(f"üîÑ –ê–≥–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–æ–≤–∞–Ω–æ –¥–æ {agent.desired_instances} —ñ–Ω—Å—Ç–∞–Ω—Å—ñ–≤")
    
    # 6. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é
    logger.info("üíæ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—î–º...")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è in-memory —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
    agent_repo = InMemoryRepository()
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–≥–µ–Ω—Ç–∞
    saved_agent = await agent_repo.save(agent)
    logger.info(f"üíæ –ê–≥–µ–Ω—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó")
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–≥–µ–Ω—Ç–∞
    loaded_agent = await agent_repo.get_by_id(saved_agent.id)
    if loaded_agent:
        logger.info(f"üìñ –ê–≥–µ–Ω—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é: {loaded_agent.name}")
    
    # –ü–æ—à—É–∫ –∞–≥–µ–Ω—Ç—ñ–≤ –∑–∞ —Ç–∏–ø–æ–º
    agents = await agent_repo.list(agent_type=AgentType.ANALYTICS)
    logger.info(f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ {len(agents)} –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏—Ö –∞–≥–µ–Ω—Ç—ñ–≤")
    
    # 7. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –¥–æ–º–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É
    logger.info("üîß –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –¥–æ–º–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É...")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—É
    agent_service = AgentService()
    agent_service.register_repository("agent", agent_repo)
    
    # –ü–æ—à—É–∫ –∑–¥–æ—Ä–æ–≤–∏—Ö –∞–≥–µ–Ω—Ç—ñ–≤
    healthy_agents = await agent_service.get_healthy_agents()
    logger.info(f"üíö –ó–Ω–∞–π–¥–µ–Ω–æ {len(healthy_agents)} –∑–¥–æ—Ä–æ–≤–∏—Ö –∞–≥–µ–Ω—Ç—ñ–≤")
    
    # 8. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    logger.info("‚öôÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...")
    logger.info(f"üåç –°–µ—Ä–µ–¥–æ–≤–∏—â–µ: {settings.environment}")
    logger.info(f"üêõ Debug —Ä–µ–∂–∏–º: {settings.debug}")
    logger.info(f"üìä Cloudflare —É–≤—ñ–º–∫–Ω–µ–Ω–æ: {settings.enable_cloudflare}")
    logger.info(f"üìß Email —É–≤—ñ–º–∫–Ω–µ–Ω–æ: {settings.enable_email}")
    logger.info(f"üé• WebRTC —É–≤—ñ–º–∫–Ω–µ–Ω–æ: {settings.enable_webrtc}")
    
    # 9. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
    logger.info("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó...")
    
    try:
        # –°–ø—Ä–æ–±–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∞–≥–µ–Ω—Ç–∞ –∑ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
        invalid_agent = Agent(
            name="",  # –ü–æ—Ä–æ–∂–Ω—î —ñ–º'—è - –º–∞—î –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É
            agent_type=AgentType.WORKER
        )
    except Exception as e:
        logger.info(f"üö´ –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞: {type(e).__name__}")
    
    # 10. –§—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    logger.info("üìä –§—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    logger.info(f"  - –ê–≥–µ–Ω—Ç—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–æ: 1")
    logger.info(f"  - –ó–∞–≤–¥–∞–Ω—å –≤–∏–∫–æ–Ω–∞–Ω–æ: 1") 
    logger.info(f"  - –î–æ–º–µ–Ω–Ω–∏—Ö –ø–æ–¥—ñ–π: {len(events)}")
    logger.info(f"  - –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: 100%")
    
    logger.info("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ—ó –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")


async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è."""
    try:
        await demonstrate_new_architecture()
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó: {e}", exc_info=True)
        return 1
    
    return 0


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
