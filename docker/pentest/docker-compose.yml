# Docker Compose configuration for Penetration Testing System
version: '3.8'

services:
  # Main penetration testing service
  pentest-agent:
    build:
      context: ../../
      dockerfile: docker/pentest/Dockerfile
    container_name: datamcp-pentest-agent
    restart: unless-stopped
    
    # Security settings
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined  # Required for some network tools
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    # Network configuration
    networks:
      - pentest-network
    
    # Environment variables
    environment:
      - PYTHONUNBUFFERED=1
      - SAFETY_LEVEL=high
      - LOG_LEVEL=INFO
      - BRIGHT_DATA_API_TOKEN=${BRIGHT_DATA_API_TOKEN}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    
    # Volume mounts
    volumes:
      - ./configs:/app/configs:ro
      - ./logs:/app/logs:rw
      - ./reports:/app/reports:rw
      - /etc/localtime:/etc/localtime:ro
    
    # Port mapping (if needed for web interface)
    ports:
      - "8080:8080"
    
    # Health check
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Dependencies
    depends_on:
      - redis
      - mongodb
    
    # User mapping
    user: "1000:1000"

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: datamcp-pentest-redis
    restart: unless-stopped
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    
    # Network configuration
    networks:
      - pentest-network
    
    # Configuration
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-pentestpass}
    
    # Volume for persistence
    volumes:
      - redis-data:/data
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB for data storage
  mongodb:
    image: mongo:7
    container_name: datamcp-pentest-mongodb
    restart: unless-stopped
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M
    
    # Network configuration
    networks:
      - pentest-network
    
    # Environment variables
    environment:
      - MONGO_INITDB_ROOT_USERNAME=pentestuser
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD:-pentestpass}
      - MONGO_INITDB_DATABASE=pentest
    
    # Volume for persistence
    volumes:
      - mongodb-data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d:ro
    
    # Health check
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: datamcp-pentest-nginx
    restart: unless-stopped
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    
    # Network configuration
    networks:
      - pentest-network
    
    # Port mapping
    ports:
      - "80:80"
      - "443:443"
    
    # Configuration
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx:rw
    
    # Dependencies
    depends_on:
      - pentest-agent
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Log aggregation (optional)
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: datamcp-pentest-fluentd
    restart: unless-stopped
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    
    # Network configuration
    networks:
      - pentest-network
    
    # Configuration
    volumes:
      - ./fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - ./logs:/var/log/pentest:ro
    
    # Port for log collection
    ports:
      - "24224:24224"
      - "24224:24224/udp"

# Network configuration
networks:
  pentest-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: pentest-br0

# Volume configuration
volumes:
  redis-data:
    driver: local
  mongodb-data:
    driver: local
