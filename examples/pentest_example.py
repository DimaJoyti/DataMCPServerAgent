#!/usr/bin/env python3
"""
Penetration Testing Example

This example demonstrates how to use the DataMCPServerAgent penetration testing
system for authorized security testing.
"""

import asyncio
import logging
from datetime import datetime

from src.core.pentest_main import create_pentest_system


async def demo_pentest_workflow():
    """
    Demonstrate a complete penetration testing workflow
    
    This example shows:
    1. System initialization
    2. Target validation
    3. Reconnaissance
    4. Vulnerability scanning
    5. Report generation
    """
    print("🔒 DataMCPServerAgent Penetration Testing Demo")
    print("=" * 60)
    print("⚠️  This is a demonstration using safe, authorized targets only!")
    print("=" * 60)
    
    try:
        # Initialize the penetration testing system
        print("\n🔄 Initializing penetration testing system...")
        pentest_coordinator = await create_pentest_system()
        print("✅ System initialized successfully!")
        
        # Demo target (using safe, public test targets)
        demo_target = {
            "name": "Scanme Demo Target",
            "ip_addresses": ["45.33.32.156"],  # scanme.nmap.org
            "domains": ["scanme.nmap.org"],
            "scope": {
                "description": "Demo penetration test on authorized public target",
                "excluded_ips": [],
                "excluded_domains": [],
                "testing_window": {
                    "start": datetime.now().isoformat(),
                    "duration_hours": 1
                }
            }
        }
        
        print(f"\n🎯 Demo Target: {demo_target['name']}")
        print(f"   IPs: {', '.join(demo_target['ip_addresses'])}")
        print(f"   Domains: {', '.join(demo_target['domains'])}")
        
        # Create penetration testing session
        print("\n📋 Creating penetration testing session...")
        session_id = await pentest_coordinator.create_pentest_session(
            target_name=demo_target["name"],
            ip_addresses=demo_target["ip_addresses"],
            domains=demo_target["domains"],
            scope=demo_target["scope"],
            authorization_token="DEMO_AUTHORIZED_TARGET"
        )
        print(f"✅ Session created: {session_id}")
        
        # Phase 1: Reconnaissance
        print("\n🔍 Phase 1: Reconnaissance")
        print("-" * 30)
        recon_results = await pentest_coordinator.execute_pentest_phase(
            session_id, "reconnaissance"
        )
        
        print("📊 Reconnaissance Results:")
        print(f"   DNS Records: {len(recon_results.get('dns_results', []))}")
        print(f"   Subdomains: {len(recon_results.get('subdomains', []))}")
        print(f"   Technologies: {len(recon_results.get('technologies', []))}")
        print(f"   Potential Vulnerabilities: {len(recon_results.get('potential_vulnerabilities', []))}")
        
        # Display some reconnaissance details
        if recon_results.get('potential_vulnerabilities'):
            print("\n🚨 Potential Vulnerabilities Found:")
            for vuln in recon_results['potential_vulnerabilities'][:3]:  # Show first 3
                print(f"   • {vuln}")
        
        # Phase 2: Vulnerability Scanning
        print("\n🔍 Phase 2: Vulnerability Scanning")
        print("-" * 35)
        scan_results = await pentest_coordinator.execute_pentest_phase(
            session_id, "scanning"
        )
        
        print("📊 Vulnerability Scanning Results:")
        print(f"   Hosts Scanned: {len(scan_results.get('hosts', []))}")
        print(f"   Open Ports: {scan_results.get('total_open_ports', 0)}")
        print(f"   Services Detected: {scan_results.get('total_services', 0)}")
        
        # Display open ports
        if scan_results.get('hosts'):
            for host in scan_results['hosts'][:1]:  # Show first host
                print(f"\n🌐 Host: {host.get('ip', 'Unknown')}")
                for protocol, ports in host.get('protocols', {}).items():
                    open_ports = [port for port, info in ports.items() if info.get('state') == 'open']
                    if open_ports:
                        print(f"   {protocol.upper()} Open Ports: {', '.join(map(str, open_ports[:5]))}")
        
        # Phase 3: Report Generation
        print("\n📄 Phase 3: Report Generation")
        print("-" * 30)
        report_results = await pentest_coordinator.execute_pentest_phase(
            session_id, "reporting"
        )
        
        print("📊 Report Generation Results:")
        print(f"   Report Path: {report_results.get('report_path', 'Not specified')}")
        print(f"   Executive Summary: {report_results.get('executive_summary', 'Generated')}")
        
        # Session Summary
        session_status = await pentest_coordinator.get_session_status(session_id)
        print(f"\n📋 Session Summary:")
        print(f"   Session ID: {session_status['session_id']}")
        print(f"   Status: {session_status['status']}")
        print(f"   Target: {session_status['target']['name']}")
        print(f"   Findings: {session_status['findings_count']}")
        
        print("\n✅ Penetration testing demo completed successfully!")
        
    except Exception as e:
        logging.error(f"Demo failed: {str(e)}")
        print(f"❌ Demo failed: {str(e)}")


async def demo_osint_capabilities():
    """
    Demonstrate OSINT (Open Source Intelligence) capabilities
    """
    print("\n🕵️ OSINT Capabilities Demo")
    print("=" * 40)
    
    try:
        # Initialize system
        pentest_coordinator = await create_pentest_system()
        
        # Demo OSINT on a public domain
        demo_domain = "example.com"
        
        print(f"\n🔍 Gathering OSINT on: {demo_domain}")
        
        # Create a minimal session for OSINT
        session_id = await pentest_coordinator.create_pentest_session(
            target_name="OSINT Demo",
            ip_addresses=[],
            domains=[demo_domain],
            scope={"description": "OSINT demonstration"},
            authorization_token="OSINT_DEMO"
        )
        
        # Perform reconnaissance (which includes OSINT)
        osint_results = await pentest_coordinator.execute_pentest_phase(
            session_id, "reconnaissance"
        )
        
        print("\n📊 OSINT Results:")
        print(f"   DNS Records: {len(osint_results.get('dns_results', []))}")
        print(f"   WHOIS Data: {len(osint_results.get('whois_results', []))}")
        print(f"   Subdomains: {len(osint_results.get('subdomains', []))}")
        print(f"   Technologies: {len(osint_results.get('technologies', []))}")
        
        # Display some OSINT details
        if osint_results.get('dns_results'):
            dns_result = osint_results['dns_results'][0]
            dns_info = dns_result.get('dns_info', {})
            print(f"\n🌐 DNS Information for {dns_result.get('domain', 'Unknown')}:")
            if dns_info.get('A'):
                print(f"   A Records: {', '.join(dns_info['A'][:3])}")
            if dns_info.get('MX'):
                print(f"   MX Records: {', '.join(dns_info['MX'][:2])}")
            if dns_info.get('NS'):
                print(f"   NS Records: {', '.join(dns_info['NS'][:2])}")
        
        if osint_results.get('technologies'):
            print(f"\n🔧 Detected Technologies:")
            for tech in osint_results['technologies'][:5]:
                print(f"   • {tech}")
        
        print("\n✅ OSINT demo completed!")
        
    except Exception as e:
        logging.error(f"OSINT demo failed: {str(e)}")
        print(f"❌ OSINT demo failed: {str(e)}")


async def demo_safety_features():
    """
    Demonstrate safety and security features
    """
    print("\n🛡️ Safety Features Demo")
    print("=" * 30)
    
    try:
        # Initialize system
        pentest_coordinator = await create_pentest_system()
        
        print("\n🔒 Testing safety controls...")
        
        # Test 1: Invalid target validation
        print("\n1. Testing invalid target validation:")
        try:
            await pentest_coordinator.create_pentest_session(
                target_name="Invalid Target",
                ip_addresses=["127.0.0.1"],  # Localhost - should be blocked
                domains=[],
                scope={"description": "Invalid target test"},
                authorization_token="INVALID_TEST"
            )
            print("   ❌ Safety control failed - localhost was allowed!")
        except Exception as e:
            print(f"   ✅ Safety control working - {str(e)[:50]}...")
        
        # Test 2: Missing authorization
        print("\n2. Testing authorization requirement:")
        try:
            await pentest_coordinator.create_pentest_session(
                target_name="No Auth Target",
                ip_addresses=["8.8.8.8"],
                domains=[],
                scope={"description": "No auth test"},
                authorization_token=""  # Empty token
            )
            print("   ❌ Safety control failed - empty auth was allowed!")
        except Exception as e:
            print(f"   ✅ Safety control working - {str(e)[:50]}...")
        
        # Test 3: Emergency stop functionality
        print("\n3. Testing emergency stop:")
        await pentest_coordinator.emergency_stop("demo", "Safety demo test")
        print("   ✅ Emergency stop executed successfully")
        
        # Reset emergency stop
        await pentest_coordinator.safety_controller.reset_emergency_stop()
        print("   ✅ Emergency stop reset")
        
        print("\n✅ Safety features demo completed!")
        
    except Exception as e:
        logging.error(f"Safety demo failed: {str(e)}")
        print(f"❌ Safety demo failed: {str(e)}")


async def main():
    """Main demo function"""
    print("🚀 DataMCPServerAgent Penetration Testing System Demo")
    print("=" * 70)
    
    # Configure logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    try:
        # Run demos
        await demo_pentest_workflow()
        await demo_osint_capabilities()
        await demo_safety_features()
        
        print("\n🎉 All demos completed successfully!")
        print("\n📚 Next Steps:")
        print("   1. Review the generated reports")
        print("   2. Customize the configuration in configs/pentest_config.yaml")
        print("   3. Set up your Bright Data API credentials")
        print("   4. Configure target authorization procedures")
        print("   5. Run real penetration tests on authorized targets")
        
    except KeyboardInterrupt:
        print("\n\n🛑 Demo interrupted by user")
    except Exception as e:
        logging.error(f"Demo failed: {str(e)}")
        print(f"❌ Demo failed: {str(e)}")


if __name__ == "__main__":
    asyncio.run(main())
