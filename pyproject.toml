[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "datamcp-server-agent"
version = "2.0.0"
description = "Advanced AI Agent System with MCP Integration"
readme = "docs/README_IMPROVED.md"
license = {file = "LICENSE"}
authors = [
    {name = "DataMCP Team", email = "team@datamcp.dev"},
]
maintainers = [
    {name = "DataMCP Team", email = "team@datamcp.dev"},
]
keywords = [
    "ai",
    "agent",
    "mcp",
    "fastapi",
    "async",
    "microservices",
    "cloudflare",
    "automation"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Framework :: FastAPI",
    "Framework :: AsyncIO",
]
requires-python = ">=3.9"
dependencies = [
    # Core framework
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",

    # CLI
    "typer[all]>=0.9.0",
    "rich>=13.7.0",
    "click>=8.1.7",

    # Configuration
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.1",

    # Logging
    "structlog>=23.2.0",

    # Async utilities
    "aiofiles>=23.2.1",

    # Date/Time
    "python-dateutil>=2.8.2",
    "pytz>=2023.3",

    # Utilities
    "shortuuid>=1.0.11",
    "tenacity>=8.2.3",

    # AI/ML dependencies for semantic agents
    "langchain-anthropic>=0.1.0",
    "langchain-core>=0.1.0",
    "langchain-mcp-adapters>=0.1.0",
    "psutil>=5.9.0",

    # MCP Protocol
    "mcp>=1.0.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    # Testing
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "factory-boy>=3.3.0",
    "httpx>=0.25.2",

    # Code quality
    "black>=23.11.0",
    "isort>=5.12.0",
    "ruff>=0.1.6",
    "mypy>=1.7.1",
    "pylint>=3.0.0",
    "pre-commit>=3.6.0",
    "bandit>=1.7.5",

    # Additional linting
    "flake8>=6.0.0",
    "flake8-docstrings>=1.7.0",

    # Documentation
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.8",
    "mkdocs-mermaid2-plugin>=1.1.1",
]

# Production dependencies
prod = [
    # Database
    "sqlalchemy[asyncio]>=2.0.23",
    "alembic>=1.13.1",
    "asyncpg>=0.29.0",
    "aiosqlite>=0.19.0",

    # HTTP client
    "httpx>=0.25.2",
    "aiohttp>=3.9.1",

    # Authentication & Security
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",

    # Monitoring
    "prometheus-client>=0.19.0",

    # Task queue
    "celery>=5.3.4",
    "redis>=5.0.1",

    # Caching
    "aiocache>=0.12.2",

    # Rate limiting
    "slowapi>=0.1.9",
]

# Cloud integrations
cloud = [
    # Cloudflare
    "cloudflare>=2.11.1",
]

# Communication
communication = [
    # Email
    "aiosmtplib>=3.0.1",
    "sendgrid>=6.10.0",
    "jinja2>=3.1.2",

    # WebRTC
    "aiortc>=1.6.0",
    "websockets>=12.0",

    # Audio/Video processing
    "pillow>=10.1.0",
    "pydub>=0.25.1",
]

# All optional dependencies
all = [
    "datamcp-server-agent[dev,prod,cloud,communication]"
]

[project.urls]
Homepage = "https://github.com/DimaJoyti/DataMCPServerAgent"
Documentation = "https://datamcp.dev/docs"
Repository = "https://github.com/DimaJoyti/DataMCPServerAgent"
"Bug Tracker" = "https://github.com/DimaJoyti/DataMCPServerAgent/issues"
Changelog = "https://github.com/DimaJoyti/DataMCPServerAgent/blob/main/CHANGELOG.md"

[project.scripts]
datamcp = "app.main_improved:app"

[tool.hatch.build.targets.wheel]
packages = ["app"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true

# Ruff configuration
[tool.ruff]
line-length = 100
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "tests.*",
    "alembic.*",
    "uvicorn.*",
    "prometheus_client.*",
    "structlog.*",
    "rich.*",
    "typer.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
    "-ra",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/migrations/*",
    "*/alembic/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

# Pylint configuration
[tool.pylint.main]
load-plugins = [
    "pylint.extensions.check_elif",
    "pylint.extensions.bad_builtin",
    "pylint.extensions.docparams",
    "pylint.extensions.for_any_all",
    "pylint.extensions.set_membership",
    "pylint.extensions.code_style",
    "pylint.extensions.overlapping_exceptions",
    "pylint.extensions.typing",
    "pylint.extensions.redefined_variable_type",
    "pylint.extensions.comparison_placement",
]

[tool.pylint.messages_control]
max-line-length = 100
disable = [
    "missing-docstring",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-instance-attributes",
    "too-many-locals",
    "too-many-branches",
    "too-many-statements",
    "duplicate-code",
    "import-error",
    "no-name-in-module",
]

[tool.pylint.format]
max-line-length = 100

[tool.pylint.design]
max-args = 10
max-locals = 20
max-returns = 8
max-branches = 15
max-statements = 60
max-parents = 10
max-attributes = 15
min-public-methods = 1
max-public-methods = 25
max-bool-expr = 8

[tool.pylint.similarities]
min-similarity-lines = 6
ignore-comments = true
ignore-docstrings = true
ignore-imports = true

[tool.pylint.typecheck]
ignored-modules = [
    "alembic",
    "uvicorn",
    "prometheus_client",
    "structlog",
    "rich",
    "typer",
    "langchain_anthropic",
    "langchain_core",
    "langchain_mcp_adapters",
    "mcp",
    "langgraph",
]

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "migrations", "alembic"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_process_args
