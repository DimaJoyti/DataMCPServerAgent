"""
Nmap Tools for Network Scanning

This module provides a comprehensive wrapper around Nmap for network scanning
and reconnaissance with safety controls and result normalization.
"""

import asyncio
import logging
import json
from typing import Dict, List, Any, Optional
from datetime import datetime
from dataclasses import dataclass

import nmap
from langchain_core.tools import BaseTool

from src.security.safety_controller import SafetyController


@dataclass
class NmapScanResult:
    """Represents Nmap scan results"""
    target: str
    scan_type: str
    start_time: datetime
    end_time: datetime
    hosts: List[Dict[str, Any]]
    scan_stats: Dict[str, Any]
    raw_output: str


class NmapToolkit:
    """
    Comprehensive Nmap toolkit for network scanning
    
    This toolkit provides safe and controlled access to Nmap functionality
    with proper result normalization and safety controls.
    """
    
    def __init__(self, safety_controller: Optional[SafetyController] = None):
        self.nm = nmap.PortScanner()
        self.safety_controller = safety_controller
        self.logger = logging.getLogger(__name__)
        
        # Predefined safe scan profiles
        self.scan_profiles = {
            "discovery": "-sn",  # Ping scan only
            "quick": "-T4 -F",  # Fast scan of common ports
            "comprehensive": "-T4 -A -v",  # Comprehensive scan with OS detection
            "stealth": "-sS -T2",  # Stealth SYN scan
            "udp": "-sU --top-ports 100",  # UDP scan of top 100 ports
            "version": "-sV",  # Version detection
            "os": "-O",  # OS detection
            "script": "-sC",  # Default scripts
        }
    
    async def create_nmap_tools(self) -> List[BaseTool]:
        """Create Nmap-based tools for LangChain integration"""
        tools = []
        
        # Host discovery tool
        tools.append(self._create_host_discovery_tool())
        
        # Port scanning tool
        tools.append(self._create_port_scan_tool())
        
        # Service detection tool
        tools.append(self._create_service_detection_tool())
        
        # OS detection tool
        tools.append(self._create_os_detection_tool())
        
        # Vulnerability scanning tool
        tools.append(self._create_vuln_scan_tool())
        
        return tools
    
    def _create_host_discovery_tool(self) -> BaseTool:
        """Create host discovery tool"""
        async def _run(target: str, scan_type: str = "discovery") -> str:
            """Discover live hosts in the target range"""
            try:
                # Safety check
                if self.safety_controller:
                    safety_check = await self.safety_controller.validate_target(target)
                    if not safety_check.approved:
                        return f"Target validation failed: {safety_check.reason}"
                
                result = await self.host_discovery(target, scan_type)
                return self._format_discovery_results(result)
                
            except Exception as e:
                self.logger.error(f"Host discovery failed: {str(e)}")
                return f"Host discovery failed: {str(e)}"
        
        return BaseTool(
            name="nmap_host_discovery",
            description="Discover live hosts in a network range using Nmap ping scans",
            func=_run,
            args_schema={
                "type": "object",
                "properties": {
                    "target": {
                        "type": "string", 
                        "description": "Target IP address, range, or hostname (e.g., '192.168.1.0/24', '10.0.0.1-10')"
                    },
                    "scan_type": {
                        "type": "string",
                        "description": "Type of discovery scan",
                        "enum": ["discovery", "quick"],
                        "default": "discovery"
                    }
                },
                "required": ["target"]
            }
        )
    
    def _create_port_scan_tool(self) -> BaseTool:
        """Create port scanning tool"""
        async def _run(target: str, ports: str = "1-1000", scan_type: str = "quick") -> str:
            """Scan ports on target hosts"""
            try:
                # Safety check
                if self.safety_controller:
                    safety_check = await self.safety_controller.validate_target(target)
                    if not safety_check.approved:
                        return f"Target validation failed: {safety_check.reason}"
                
                result = await self.port_scan(target, ports, scan_type)
                return self._format_port_scan_results(result)
                
            except Exception as e:
                self.logger.error(f"Port scan failed: {str(e)}")
                return f"Port scan failed: {str(e)}"
        
        return BaseTool(
            name="nmap_port_scan",
            description="Scan ports on target hosts using Nmap",
            func=_run,
            args_schema={
                "type": "object",
                "properties": {
                    "target": {
                        "type": "string",
                        "description": "Target IP address or hostname"
                    },
                    "ports": {
                        "type": "string",
                        "description": "Port range to scan (e.g., '1-1000', '80,443,8080')",
                        "default": "1-1000"
                    },
                    "scan_type": {
                        "type": "string",
                        "description": "Type of port scan",
                        "enum": ["quick", "comprehensive", "stealth"],
                        "default": "quick"
                    }
                },
                "required": ["target"]
            }
        )
    
    def _create_service_detection_tool(self) -> BaseTool:
        """Create service detection tool"""
        async def _run(target: str, ports: str = "1-1000") -> str:
            """Detect services and versions on open ports"""
            try:
                # Safety check
                if self.safety_controller:
                    safety_check = await self.safety_controller.validate_target(target)
                    if not safety_check.approved:
                        return f"Target validation failed: {safety_check.reason}"
                
                result = await self.service_detection(target, ports)
                return self._format_service_results(result)
                
            except Exception as e:
                self.logger.error(f"Service detection failed: {str(e)}")
                return f"Service detection failed: {str(e)}"
        
        return BaseTool(
            name="nmap_service_detection",
            description="Detect services and versions running on open ports",
            func=_run,
            args_schema={
                "type": "object",
                "properties": {
                    "target": {
                        "type": "string",
                        "description": "Target IP address or hostname"
                    },
                    "ports": {
                        "type": "string",
                        "description": "Port range to scan for services",
                        "default": "1-1000"
                    }
                },
                "required": ["target"]
            }
        )
    
    async def host_discovery(self, target: str, scan_type: str = "discovery") -> NmapScanResult:
        """Perform host discovery scan"""
        start_time = datetime.now()
        
        # Get scan arguments
        scan_args = self.scan_profiles.get(scan_type, self.scan_profiles["discovery"])
        
        self.logger.info(f"Starting host discovery scan on {target} with args: {scan_args}")
        
        # Perform scan
        self.nm.scan(target, arguments=scan_args)
        
        end_time = datetime.now()
        
        # Process results
        hosts = []
        for host in self.nm.all_hosts():
            host_info = {
                "ip": host,
                "hostname": self.nm[host].hostname(),
                "state": self.nm[host].state(),
                "protocols": list(self.nm[host].all_protocols()),
                "last_seen": end_time.isoformat()
            }
            hosts.append(host_info)
        
        return NmapScanResult(
            target=target,
            scan_type=scan_type,
            start_time=start_time,
            end_time=end_time,
            hosts=hosts,
            scan_stats=dict(self.nm.scanstats()),
            raw_output=str(self.nm.csv())
        )
    
    async def port_scan(self, target: str, ports: str = "1-1000", scan_type: str = "quick") -> NmapScanResult:
        """Perform port scanning"""
        start_time = datetime.now()
        
        # Get scan arguments
        base_args = self.scan_profiles.get(scan_type, self.scan_profiles["quick"])
        scan_args = f"{base_args} -p {ports}"
        
        self.logger.info(f"Starting port scan on {target} with args: {scan_args}")
        
        # Perform scan
        self.nm.scan(target, arguments=scan_args)
        
        end_time = datetime.now()
        
        # Process results
        hosts = []
        for host in self.nm.all_hosts():
            host_info = {
                "ip": host,
                "hostname": self.nm[host].hostname(),
                "state": self.nm[host].state(),
                "protocols": {},
                "scan_time": (end_time - start_time).total_seconds()
            }
            
            # Process each protocol
            for protocol in self.nm[host].all_protocols():
                ports_info = {}
                for port in self.nm[host][protocol].keys():
                    port_info = self.nm[host][protocol][port]
                    ports_info[port] = {
                        "state": port_info["state"],
                        "name": port_info.get("name", ""),
                        "product": port_info.get("product", ""),
                        "version": port_info.get("version", ""),
                        "extrainfo": port_info.get("extrainfo", "")
                    }
                host_info["protocols"][protocol] = ports_info
            
            hosts.append(host_info)
        
        return NmapScanResult(
            target=target,
            scan_type=scan_type,
            start_time=start_time,
            end_time=end_time,
            hosts=hosts,
            scan_stats=dict(self.nm.scanstats()),
            raw_output=str(self.nm.csv())
        )
    
    async def service_detection(self, target: str, ports: str = "1-1000") -> NmapScanResult:
        """Perform service version detection"""
        start_time = datetime.now()
        
        scan_args = f"-sV -p {ports}"
        
        self.logger.info(f"Starting service detection on {target} with args: {scan_args}")
        
        # Perform scan
        self.nm.scan(target, arguments=scan_args)
        
        end_time = datetime.now()
        
        # Process results (similar to port_scan but with more service details)
        hosts = []
        for host in self.nm.all_hosts():
            host_info = {
                "ip": host,
                "hostname": self.nm[host].hostname(),
                "state": self.nm[host].state(),
                "services": [],
                "scan_time": (end_time - start_time).total_seconds()
            }
            
            # Extract detailed service information
            for protocol in self.nm[host].all_protocols():
                for port in self.nm[host][protocol].keys():
                    port_info = self.nm[host][protocol][port]
                    if port_info["state"] == "open":
                        service_info = {
                            "port": port,
                            "protocol": protocol,
                            "service": port_info.get("name", "unknown"),
                            "product": port_info.get("product", ""),
                            "version": port_info.get("version", ""),
                            "extrainfo": port_info.get("extrainfo", ""),
                            "confidence": port_info.get("conf", ""),
                            "cpe": port_info.get("cpe", "")
                        }
                        host_info["services"].append(service_info)
            
            hosts.append(host_info)
        
        return NmapScanResult(
            target=target,
            scan_type="service_detection",
            start_time=start_time,
            end_time=end_time,
            hosts=hosts,
            scan_stats=dict(self.nm.scanstats()),
            raw_output=str(self.nm.csv())
        )
    
    def _format_discovery_results(self, result: NmapScanResult) -> str:
        """Format host discovery results for display"""
        output = f"## Host Discovery Results for {result.target}\n\n"
        output += f"**Scan Type:** {result.scan_type}\n"
        output += f"**Duration:** {(result.end_time - result.start_time).total_seconds():.2f} seconds\n"
        output += f"**Hosts Found:** {len(result.hosts)}\n\n"
        
        if result.hosts:
            output += "### Live Hosts:\n"
            for host in result.hosts:
                output += f"- **{host['ip']}**"
                if host['hostname']:
                    output += f" ({host['hostname']})"
                output += f" - State: {host['state']}\n"
        else:
            output += "No live hosts found.\n"
        
        return output
    
    def _format_port_scan_results(self, result: NmapScanResult) -> str:
        """Format port scan results for display"""
        output = f"## Port Scan Results for {result.target}\n\n"
        output += f"**Scan Type:** {result.scan_type}\n"
        output += f"**Duration:** {(result.end_time - result.start_time).total_seconds():.2f} seconds\n\n"
        
        for host in result.hosts:
            output += f"### Host: {host['ip']}"
            if host['hostname']:
                output += f" ({host['hostname']})"
            output += f" - State: {host['state']}\n\n"
            
            for protocol, ports in host['protocols'].items():
                open_ports = [port for port, info in ports.items() if info['state'] == 'open']
                if open_ports:
                    output += f"**{protocol.upper()} Open Ports:**\n"
                    for port in open_ports:
                        port_info = ports[port]
                        output += f"- Port {port}: {port_info['name']}"
                        if port_info['product']:
                            output += f" ({port_info['product']}"
                            if port_info['version']:
                                output += f" {port_info['version']}"
                            output += ")"
                        output += "\n"
                    output += "\n"
        
        return output
    
    def _format_service_results(self, result: NmapScanResult) -> str:
        """Format service detection results for display"""
        output = f"## Service Detection Results for {result.target}\n\n"
        output += f"**Duration:** {(result.end_time - result.start_time).total_seconds():.2f} seconds\n\n"
        
        for host in result.hosts:
            output += f"### Host: {host['ip']}"
            if host['hostname']:
                output += f" ({host['hostname']})"
            output += f" - State: {host['state']}\n\n"
            
            if host['services']:
                output += "**Detected Services:**\n"
                for service in host['services']:
                    output += f"- Port {service['port']}/{service['protocol']}: "
                    output += f"{service['service']}"
                    if service['product']:
                        output += f" - {service['product']}"
                        if service['version']:
                            output += f" {service['version']}"
                    if service['extrainfo']:
                        output += f" ({service['extrainfo']})"
                    output += "\n"
                output += "\n"
            else:
                output += "No services detected.\n\n"
        
        return output
