#!/usr/bin/env python3
"""
Phase 1 Demo Script for DataMCPServerAgent

This script demonstrates all the completed features of Phase 1:
- Consolidated entry point
- Configuration system
- Logging system
- CLI interface
- Semantic agents infrastructure
- Code quality tools
"""

import subprocess
import sys
import time
from pathlib import Path

from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.text import Text

console = Console()


def run_command_demo(cmd: list, description: str, show_output: bool = True) -> bool:
    """Run a command and show the result."""
    console.print(f"\nüîß {description}", style="bold blue")
    console.print(f"Command: {' '.join(cmd)}", style="dim")
    
    try:
        result = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            timeout=30
        )
        
        if result.returncode == 0:
            console.print("‚úÖ SUCCESS", style="green")
            if show_output and result.stdout:
                # Show first few lines of output
                lines = result.stdout.strip().split('\n')[:10]
                for line in lines:
                    console.print(f"  {line}", style="dim")
                if len(result.stdout.strip().split('\n')) > 10:
                    console.print("  ... (output truncated)", style="dim")
        else:
            console.print("‚ùå FAILED", style="red")
            if result.stderr:
                console.print(f"Error: {result.stderr[:200]}...", style="red")
        
        return result.returncode == 0
        
    except subprocess.TimeoutExpired:
        console.print("‚è∞ TIMEOUT", style="yellow")
        return False
    except Exception as e:
        console.print(f"‚ùå ERROR: {e}", style="red")
        return False


def show_welcome():
    """Show welcome message."""
    welcome_text = """
üéâ –§–ê–ó–ê 1 –ó–ê–í–ï–†–®–ï–ù–ê: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –†–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤

–¶–µ–π —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä—É—î –≤—Å—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –§–∞–∑–∏ 1:
‚úÖ –ö–æ–Ω—Å–æ–ª—ñ–¥–æ–≤–∞–Ω–∞ –∫–æ–¥–æ–≤–∞ –±–∞–∑–∞
‚úÖ –Ñ–¥–∏–Ω–∞ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥—É
‚úÖ –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —è–∫—ñ—Å—Ç—å –∫–æ–¥—É
‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è
‚úÖ CLI —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–Ω—ñ –∞–≥–µ–Ω—Ç–∏ (–±–∞–∑–æ–≤–∞ —ñ–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
    """
    
    panel = Panel(
        welcome_text.strip(),
        title="üöÄ DataMCPServerAgent Phase 1 Demo",
        border_style="green",
        padding=(1, 2)
    )
    
    console.print(panel)


def demo_main_commands():
    """Demo main entry point commands."""
    console.print("\n" + "="*60, style="bold")
    console.print("üìã –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –û–°–ù–û–í–ù–ò–• –ö–û–ú–ê–ù–î", style="bold magenta")
    console.print("="*60, style="bold")
    
    commands = [
        (["python", "app/main_improved.py", "--help"], "–ì–æ–ª–æ–≤–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ --help"),
        (["python", "app/main_improved.py", "status"], "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏"),
        (["python", "app/main_improved.py", "cli", "--help"], "CLI —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å"),
        (["python", "app/main_improved.py", "semantic-agents", "--help"], "–°–µ–º–∞–Ω—Ç–∏—á–Ω—ñ –∞–≥–µ–Ω—Ç–∏"),
        (["python", "app/main_improved.py", "api", "--help"], "API —Å–µ—Ä–≤–µ—Ä"),
    ]
    
    results = []
    for cmd, desc in commands:
        success = run_command_demo(cmd, desc, show_output=True)
        results.append((desc, success))
        time.sleep(1)
    
    return results


def demo_code_quality():
    """Demo code quality tools."""
    console.print("\n" + "="*60, style="bold")
    console.print("üîç –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –Ø–ö–û–°–¢–Ü –ö–û–î–£", style="bold magenta")
    console.print("="*60, style="bold")
    
    commands = [
        (["python", "-m", "black", "--check", "app/core/config.py"], "Black —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è"),
        (["python", "-m", "isort", "--check-only", "app/core/config.py"], "isort —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—ñ–≤"),
        (["python", "-m", "ruff", "check", "app/core/config.py"], "Ruff –ª—ñ–Ω—Ç–∏–Ω–≥"),
        (["python", "-c", "import app.core.config; print('‚úÖ Config module imports successfully')"], "–Ü–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"),
        (["python", "-c", "import app.core.logging; print('‚úÖ Logging module imports successfully')"], "–Ü–º–ø–æ—Ä—Ç –ª–æ–≥—É–≤–∞–Ω–Ω—è"),
    ]
    
    results = []
    for cmd, desc in commands:
        success = run_command_demo(cmd, desc, show_output=False)
        results.append((desc, success))
        time.sleep(0.5)
    
    return results


def demo_project_structure():
    """Demo project structure."""
    console.print("\n" + "="*60, style="bold")
    console.print("üèóÔ∏è –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–£", style="bold magenta")
    console.print("="*60, style="bold")
    
    # Show key files
    key_files = [
        "app/main_improved.py",
        "app/core/config.py", 
        "app/core/logging.py",
        "pyproject.toml",
        ".pre-commit-config.yaml",
        "docs/PHASE_1_FINAL_SUMMARY.md"
    ]
    
    table = Table(title="–ö–ª—é—á–æ–≤—ñ –§–∞–π–ª–∏ –§–∞–∑–∏ 1")
    table.add_column("–§–∞–π–ª", style="cyan")
    table.add_column("–°—Ç–∞—Ç—É—Å", style="bold")
    table.add_column("–û–ø–∏—Å", style="dim")
    
    for file_path in key_files:
        if Path(file_path).exists():
            status = "‚úÖ –Ü—Å–Ω—É—î"
            style = "green"
        else:
            status = "‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π"
            style = "red"
        
        descriptions = {
            "app/main_improved.py": "–ö–æ–Ω—Å–æ–ª—ñ–¥–æ–≤–∞–Ω–∞ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥—É",
            "app/core/config.py": "–û–±'—î–¥–Ω–∞–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è",
            "app/core/logging.py": "–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è",
            "pyproject.toml": "–ö–æ–Ω—Å–æ–ª—ñ–¥–æ–≤–∞–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ",
            ".pre-commit-config.yaml": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏",
            "docs/PHASE_1_FINAL_SUMMARY.md": "–ó–≤—ñ—Ç –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è"
        }
        
        table.add_row(
            file_path,
            status,
            descriptions.get(file_path, "")
        )
    
    console.print(table)


def show_summary(main_results, quality_results):
    """Show final summary."""
    console.print("\n" + "="*60, style="bold")
    console.print("üìä –ü–Ü–î–°–£–ú–û–ö –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–á", style="bold magenta")
    console.print("="*60, style="bold")
    
    # Main commands summary
    table = Table(title="–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è")
    table.add_column("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", style="cyan")
    table.add_column("–¢–µ—Å—Ç", style="white")
    table.add_column("–†–µ–∑—É–ª—å—Ç–∞—Ç", style="bold")
    
    for desc, success in main_results:
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        table.add_row("–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏", desc, status)
    
    for desc, success in quality_results:
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        table.add_row("–Ø–∫—ñ—Å—Ç—å –∫–æ–¥—É", desc, status)
    
    console.print(table)
    
    # Calculate success rate
    total_tests = len(main_results) + len(quality_results)
    passed_tests = sum(1 for _, success in main_results + quality_results if success)
    success_rate = (passed_tests / total_tests) * 100 if total_tests > 0 else 0
    
    # Final message
    if success_rate >= 80:
        style = "green"
        message = f"üéâ –§–ê–ó–ê 1 –£–°–ü–Ü–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê! ({success_rate:.1f}% —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ)"
    elif success_rate >= 60:
        style = "yellow"
        message = f"‚ö†Ô∏è –§–∞–∑–∞ 1 —á–∞—Å—Ç–∫–æ–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ({success_rate:.1f}% —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ)"
    else:
        style = "red"
        message = f"‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è ({success_rate:.1f}% —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ)"
    
    console.print(f"\n{message}", style=f"bold {style}")
    
    # Next steps
    next_steps = """
üöÄ –ù–ê–°–¢–£–ü–ù–Ü –ö–†–û–ö–ò:

1. –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –§–∞–∑–∏ 2: –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è LLM-driven Pipelines
2. –†–æ–∑—Ä–æ–±–∫–∞ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π
3. –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ –≤–µ–∫—Ç–æ—Ä–Ω–∏–º–∏ —Å—Ö–æ–≤–∏—â–∞–º–∏
4. –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Å–µ–º–∞–Ω—Ç–∏—á–Ω–∏—Ö –∞–≥–µ–Ω—Ç—ñ–≤
5. Cloudflare Workers —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è
    """
    
    panel = Panel(
        next_steps.strip(),
        title="üéØ –ì–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å –¥–æ –§–∞–∑–∏ 2",
        border_style="blue",
        padding=(1, 2)
    )
    
    console.print(panel)


def main():
    """Main demo function."""
    show_welcome()
    
    # Demo main commands
    main_results = demo_main_commands()
    
    # Demo code quality
    quality_results = demo_code_quality()
    
    # Demo project structure
    demo_project_structure()
    
    # Show summary
    show_summary(main_results, quality_results)


if __name__ == "__main__":
    main()
