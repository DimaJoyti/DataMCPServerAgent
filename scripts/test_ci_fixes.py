#!/usr/bin/env python3
"""
Testing CI/CD fixes
"""

import sys
import os
from pathlib import Path

def test_workflow_files():
    """Test workflow files"""
    print("üîç Checking workflow files...")

    project_root = Path(__file__).parent.parent
    workflows_dir = project_root / ".github" / "workflows"

    if not workflows_dir.exists():
        print("‚ùå Directory .github/workflows does not exist")
        return False

    workflow_files = list(workflows_dir.glob("*.yml"))
    print(f"Found {len(workflow_files)} workflow files")

    issues_found = False

    for workflow_file in workflow_files:
        print(f"\nüìÑ Checking: {workflow_file.name}")

        try:
            with open(workflow_file, 'r', encoding='utf-8') as f:
                content = f.read()

            # Check for deprecated versions
            if "actions/upload-artifact@v3" in content:
                print(f"  ‚ùå Found deprecated version upload-artifact@v3")
                issues_found = True
            elif "actions/upload-artifact@v4" in content:
                print(f"  ‚úÖ Using current version upload-artifact@v4")

            # Check for other deprecated actions
            if "actions/setup-python@v3" in content:
                print(f"  ‚ö†Ô∏è Recommend updating setup-python to v4")

            if "actions/cache@v2" in content:
                print(f"  ‚ö†Ô∏è Recommend updating cache to v3")

        except Exception as e:
            print(f"  ‚ùå Error reading file: {e}")
            issues_found = True

    if not issues_found:
        print("\n‚úÖ All workflow files are OK!")
        return True
    else:
        print("\n‚ùå Found issues in workflow files")
        return False

def test_requirements_files():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ requirements"""
    print("\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤ requirements...")
    
    project_root = Path(__file__).parent.parent
    
    req_files = [
        "requirements.txt",
        "requirements-ci.txt"
    ]
    
    for req_file in req_files:
        file_path = project_root / req_file
        print(f"\nüìÑ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: {req_file}")
        
        if not file_path.exists():
            print(f"  ‚ùå –§–∞–π–ª {req_file} –Ω–µ —ñ—Å–Ω—É—î")
            continue
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
            if req_file == "requirements-ci.txt":
                required_packages = [
                    "pytest",
                    "black",
                    "isort", 
                    "ruff",
                    "mypy",
                    "bandit"
                ]
                
                for package in required_packages:
                    if package in content:
                        print(f"  ‚úÖ {package} –ø—Ä–∏—Å—É—Ç–Ω—ñ–π")
                    else:
                        print(f"  ‚ùå {package} –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")
            
        except Exception as e:
            print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É: {e}")

def test_project_structure():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–æ–µ–∫—Ç—É"""
    print("\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–æ–µ–∫—Ç—É...")
    
    project_root = Path(__file__).parent.parent
    
    required_dirs = [
        "src",
        "app", 
        "examples",
        "scripts",
        "tests",
        "docs",
        ".github/workflows"
    ]
    
    for dir_name in required_dirs:
        dir_path = project_root / dir_name
        if dir_path.exists():
            print(f"  ‚úÖ {dir_name} —ñ—Å–Ω—É—î")
        else:
            print(f"  ‚ùå {dir_name} –≤—ñ–¥—Å—É—Ç–Ω—è")

def test_documentation():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó"""
    print("\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó...")
    
    project_root = Path(__file__).parent.parent
    
    doc_files = [
        "README.md",
        "docs/CI_CD_IMPROVEMENTS.md"
    ]
    
    for doc_file in doc_files:
        file_path = project_root / doc_file
        if file_path.exists():
            print(f"  ‚úÖ {doc_file} —ñ—Å–Ω—É—î")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–º—ñ—Ä—É —Ñ–∞–π–ª—É
            size = file_path.stat().st_size
            if size > 100:  # –ë—ñ–ª—å—à–µ 100 –±–∞–π—Ç
                print(f"    üìä –†–æ–∑–º—ñ—Ä: {size} –±–∞–π—Ç")
            else:
                print(f"    ‚ö†Ô∏è –§–∞–π–ª –¥—É–∂–µ –º–∞–ª–∏–π: {size} –±–∞–π—Ç")
        else:
            print(f"  ‚ùå {doc_file} –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å CI/CD –¥–ª—è DataMCPServerAgent")
    print("=" * 60)
    
    all_tests_passed = True
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
    tests = [
        ("Workflow —Ñ–∞–π–ª–∏", test_workflow_files),
        ("Requirements —Ñ–∞–π–ª–∏", test_requirements_files),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç—É", test_project_structure),
        ("–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è", test_documentation)
    ]
    
    for test_name, test_func in tests:
        print(f"\nüß™ –¢–µ—Å—Ç: {test_name}")
        try:
            result = test_func()
            if result is False:
                all_tests_passed = False
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ {test_name}: {e}")
            all_tests_passed = False
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print("\n" + "=" * 60)
    print("üìä –ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø")
    print("=" * 60)
    
    if all_tests_passed:
        print("üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ!")
        print("‚úÖ CI/CD –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—é—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–æ")
        return 0
    else:
        print("‚ùå –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ñ")
        print("‚ö†Ô∏è –ü–æ—Ç—Ä—ñ–±–Ω—ñ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
