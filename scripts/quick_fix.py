#!/usr/bin/env python3
"""
Quick fix for basic code issues
"""

import os
import re
from pathlib import Path

def fix_trailing_whitespace(file_path: Path) -> bool:
    """Remove trailing whitespace from lines"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()

        # Remove trailing whitespace
        lines = content.splitlines()
        cleaned_lines = [line.rstrip() for line in lines]
        cleaned_content = '\n'.join(cleaned_lines)

        # Add newline at end of file if missing
        if cleaned_content and not cleaned_content.endswith('\n'):
            cleaned_content += '\n'

        if content != cleaned_content:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(cleaned_content)
            return True

        return False
    except Exception as e:
        print(f"Error processing {file_path}: {e}")
        return False

def fix_long_lines(file_path: Path) -> bool:
    """–ë–∞–∑–æ–≤–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–æ–≤–≥–∏—Ö —Ä—è–¥–∫—ñ–≤"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()

        modified = False
        new_lines = []

        for line in lines:
            # –í–∏–¥–∞–ª–µ–Ω–Ω—è trailing whitespace
            clean_line = line.rstrip() + '\n' if line.strip() else '\n'

            # –ë–∞–∑–æ–≤–µ —Ä–æ–∑–±–∏—Ç—Ç—è –¥–æ–≤–≥–∏—Ö —Ä—è–¥–∫—ñ–≤ –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è–º–∏
            if len(clean_line) > 100 and clean_line.strip().startswith('#'):
                # –†–æ–∑–±–∏—Ç—Ç—è –¥–æ–≤–≥–∏—Ö –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
                words = clean_line.strip().split()
                if len(words) > 1:
                    current_line = words[0]
                    for word in words[1:]:
                        if len(current_line + ' ' + word) <= 79:
                            current_line += ' ' + word
                        else:
                            new_lines.append(current_line + '\n')
                            current_line = '# ' + word
                            modified = True
                    new_lines.append(current_line + '\n')
                else:
                    new_lines.append(clean_line)
            else:
                new_lines.append(clean_line)

        if modified:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.writelines(new_lines)

        return modified
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–æ–≤–≥–∏—Ö —Ä—è–¥–∫—ñ–≤ –≤ {file_path}: {e}")
        return False

def fix_blank_lines(file_path: Path) -> bool:
    """–í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—É—Å—Ç–∏—Ö —Ä—è–¥–∫—ñ–≤ –∑ –ø—Ä–æ–±—ñ–ª–∞–º–∏"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()

        # –ó–∞–º—ñ–Ω–∞ –ø—É—Å—Ç–∏—Ö —Ä—è–¥–∫—ñ–≤ –∑ –ø—Ä–æ–±—ñ–ª–∞–º–∏ –Ω–∞ —Å–ø—Ä–∞–≤–¥—ñ –ø—É—Å—Ç—ñ—à—ñ —Ä—è–¥–∫–∏
        fixed_content = re.sub(r'^\s+$', '', content, flags=re.MULTILINE)

        if content != fixed_content:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(fixed_content)
            return True

        return False
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ –ø—É—Å—Ç–∏—Ö —Ä—è–¥–∫—ñ–≤ –≤ {file_path}: {e}")
        return False

def fix_unused_imports(file_path: Path) -> bool:
    """–ë–∞–∑–æ–≤–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ—á–µ–≤–∏–¥–Ω–æ –Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö —ñ–º–ø–æ—Ä—Ç—ñ–≤"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()

        modified = False
        new_lines = []

        for line in lines:
            # –í–∏–¥–∞–ª–µ–Ω–Ω—è –æ—á–µ–≤–∏–¥–Ω–æ –Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö —ñ–º–ø–æ—Ä—Ç—ñ–≤
            if (line.strip().startswith('from typing import') and
                ('Union' in line or 'List' in line or 'Type' in line)):
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è —Ü—ñ —Ç–∏–ø–∏ –≤ —Ñ–∞–π–ª—ñ
                content = ''.join(lines)

                # –ü—Ä–æ—Å—Ç–∏–π –ø–æ—à—É–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
                if 'Union' in line and 'Union[' not in content:
                    line = line.replace('Union, ', '').replace(', Union', '').replace('Union', '')
                    modified = True

                if 'List' in line and 'List[' not in content:
                    line = line.replace('List, ', '').replace(', List', '').replace('List', '')
                    modified = True

                if 'Type' in line and 'Type[' not in content:
                    line = line.replace('Type, ', '').replace(', Type', '').replace('Type', '')
                    modified = True

                # –û—á–∏—â–µ–Ω–Ω—è –ø—É—Å—Ç–∏—Ö —ñ–º–ø–æ—Ä—Ç—ñ–≤
                if line.strip() in ['from typing import', 'from typing import ']:
                    continue

            new_lines.append(line)

        if modified:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.writelines(new_lines)

        return modified
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö —ñ–º–ø–æ—Ä—Ç—ñ–≤ –≤ {file_path}: {e}")
        return False

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    project_root = Path(__file__).parent.parent
    directories = ["src", "app", "examples", "scripts", "tests"]

    print("üöÄ –®–≤–∏–¥–∫–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º –∫–æ–¥—É...")

    total_files = 0
    fixed_files = 0

    for directory in directories:
        dir_path = project_root / directory
        if not dir_path.exists():
            print(f"‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è {directory} –Ω–µ —ñ—Å–Ω—É—î")
            continue

        print(f"\nüìÅ –û–±—Ä–æ–±–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó: {directory}")

        for py_file in dir_path.rglob("*.py"):
            total_files += 1
            file_fixed = False

            # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è trailing whitespace
            if fix_trailing_whitespace(py_file):
                file_fixed = True

            # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—É—Å—Ç–∏—Ö —Ä—è–¥–∫—ñ–≤ –∑ –ø—Ä–æ–±—ñ–ª–∞–º–∏
            if fix_blank_lines(py_file):
                file_fixed = True

            # –ë–∞–∑–æ–≤–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–æ–≤–≥–∏—Ö —Ä—è–¥–∫—ñ–≤
            if fix_long_lines(py_file):
                file_fixed = True

            # –í–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö —ñ–º–ø–æ—Ä—Ç—ñ–≤
            if fix_unused_imports(py_file):
                file_fixed = True

            if file_fixed:
                fixed_files += 1
                print(f"  ‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: {py_file.relative_to(project_root)}")

    print(f"\nüìä –ü—ñ–¥—Å—É–º–æ–∫:")
    print(f"  –í—Å—å–æ–≥–æ —Ñ–∞–π–ª—ñ–≤: {total_files}")
    print(f"  –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: {fixed_files}")

    if fixed_files > 0:
        print("‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    else:
        print("‚ÑπÔ∏è –ü—Ä–æ–±–ª–µ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

if __name__ == "__main__":
    main()
