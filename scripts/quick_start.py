#!/usr/bin/env python3
"""
Quick Start Script for DataMCPServerAgent v2.0
–ü—Ä–æ—Å—Ç–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –∑–∞–ø—É—Å–∫—É —Å–∏—Å—Ç–µ–º–∏ –±–µ–∑ —Å–∫–ª–∞–¥–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π.
"""

import asyncio
import sys
import time
from pathlib import Path
from typing import Dict, Any

# Add app directory to Python path
sys.path.insert(0, str(Path(__file__).parent))

def print_banner():
    """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞–Ω–µ—Ä–∞ –¥–æ–¥–∞—Ç–∫—É."""
    print("=" * 60)
    print("ü§ñ DataMCPServerAgent v2.0 - Quick Start")
    print("=" * 60)
    print("Advanced AI Agent System with MCP Integration")
    print("–ü–æ–∫—Ä–∞—â–µ–Ω–∞ –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞ –∑ Clean Code –ø—Ä–∏–Ω—Ü–∏–ø–∞–º–∏")
    print("=" * 60)

def check_dependencies():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –æ—Å–Ω–æ–≤–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π."""
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...")
    
    required_modules = [
        'pydantic',
        'fastapi', 
        'uvicorn',
        'structlog',
        'typer',
        'rich'
    ]
    
    missing = []
    available = []
    
    for module in required_modules:
        try:
            __import__(module)
            available.append(module)
            print(f"  ‚úÖ {module}")
        except ImportError:
            missing.append(module)
            print(f"  ‚ùå {module}")
    
    if missing:
        print(f"\n‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ –º–æ–¥—É–ª—ñ: {', '.join(missing)}")
        print("üì¶ –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —ó—Ö –∫–æ–º–∞–Ω–¥–æ—é:")
        print(f"pip install {' '.join(missing)}")
        return False
    
    print("‚úÖ –í—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ!")
    return True

def test_basic_functionality():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–æ–≤–æ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ."""
    print("\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–æ–≤–æ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ...")
    
    try:
        # Test configuration
        print("  üìã –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...")
        from app.core.config_improved import Settings
        settings = Settings()
        print(f"    ‚úÖ –î–æ–¥–∞—Ç–æ–∫: {settings.app_name} v{settings.app_version}")
        print(f"    ‚úÖ –°–µ—Ä–µ–¥–æ–≤–∏—â–µ: {settings.environment}")
        
        # Test logging
        print("  üìù –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è...")
        from app.core.logging_improved import get_logger, setup_logging
        setup_logging(settings)
        logger = get_logger("quick_start")
        logger.info("–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è")
        print("    ‚úÖ –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—î")
        
        # Test exceptions
        print("  ‚ö†Ô∏è –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∏–Ω—è—Ç–∫—ñ–≤...")
        from app.core.exceptions_improved import ValidationError
        try:
            raise ValidationError("–¢–µ—Å—Ç–æ–≤–∞ –ø–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó", field="test_field")
        except ValidationError as e:
            print(f"    ‚úÖ –í–∏–Ω—è—Ç–∫–∏ –ø—Ä–∞—Ü—é—é—Ç—å: {e.error_code}")
        
        return True
        
    except Exception as e:
        print(f"    ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return False

def test_domain_models():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–æ–º–µ–Ω–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π."""
    print("\nüèóÔ∏è –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–æ–º–µ–Ω–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π...")
    
    try:
        # Test Agent model
        print("  ü§ñ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ Agent...")
        from app.domain.models.agent import Agent, AgentType, AgentConfiguration
        
        config = AgentConfiguration(
            max_concurrent_tasks=5,
            timeout_seconds=300
        )
        
        agent = Agent(
            name="test-agent",
            agent_type=AgentType.WORKER,
            description="–¢–µ—Å—Ç–æ–≤–∏–π –∞–≥–µ–Ω—Ç",
            configuration=config
        )
        
        print(f"    ‚úÖ Agent —Å—Ç–≤–æ—Ä–µ–Ω–æ: {agent.name} (ID: {agent.id[:8]})")
        
        # Test Task model
        print("  üìã –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ Task...")
        from app.domain.models.task import Task, TaskType, TaskPriority
        
        task = Task(
            name="–¢–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è",
            task_type=TaskType.DATA_ANALYSIS,
            agent_id=agent.id,
            priority=TaskPriority.NORMAL,
            description="–¢–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏"
        )
        
        print(f"    ‚úÖ Task —Å—Ç–≤–æ—Ä–µ–Ω–æ: {task.name} (ID: {task.id[:8]})")
        
        return True
        
    except Exception as e:
        print(f"    ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –¥–æ–º–µ–Ω–Ω–∏—Ö –º–æ–¥–µ–ª—è—Ö: {e}")
        return False

async def test_api_server():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API —Å–µ—Ä–≤–µ—Ä–∞."""
    print("\nüåê –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API —Å–µ—Ä–≤–µ—Ä–∞...")
    
    try:
        from app.api.server_improved import create_api_server
        from app.core.config_improved import Settings
        
        settings = Settings(debug=True)
        app = create_api_server(settings)
        
        print("    ‚úÖ FastAPI –¥–æ–¥–∞—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
        print(f"    ‚úÖ –ù–∞–∑–≤–∞: {app.title}")
        print(f"    ‚úÖ –í–µ—Ä—Å—ñ—è: {app.version}")
        print(f"    ‚úÖ –ú–∞—Ä—à—Ä—É—Ç—ñ–≤: {len(app.routes)}")
        
        return True
        
    except Exception as e:
        print(f"    ‚ùå –ü–æ–º–∏–ª–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return False

def show_next_steps():
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏."""
    print("\nüöÄ –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:")
    print("=" * 40)
    print("1. üì¶ –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≤—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ:")
    print("   pip install -r requirements.txt")
    print()
    print("2. üåê –ó–∞–ø—É—Å—Ç–∏—Ç–∏ API —Å–µ—Ä–≤–µ—Ä:")
    print("   python app/main_improved.py api --reload")
    print()
    print("3. üñ•Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç–∏ CLI —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å:")
    print("   python app/main_improved.py cli")
    print()
    print("4. üìä –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å:")
    print("   python app/main_improved.py status")
    print()
    print("5. üìö –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é:")
    print("   docs/README_IMPROVED.md")
    print("   docs/architecture/SYSTEM_ARCHITECTURE_V2.md")
    print("=" * 40)

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è."""
    print_banner()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
    if not check_dependencies():
        print("\n‚ùå –ù–µ –≤—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —ó—Ö —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.")
        show_next_steps()
        return 1
    
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ
    tests = [
        ("–ë–∞–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å", test_basic_functionality),
        ("–î–æ–º–µ–Ω–Ω—ñ –º–æ–¥–µ–ª—ñ", test_domain_models),
        ("API —Å–µ—Ä–≤–µ—Ä", test_api_server),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É: {test_name}")
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
            
            if result:
                passed += 1
                print(f"‚úÖ –¢–µ—Å—Ç '{test_name}' –ø—Ä–æ–π–¥–µ–Ω–æ")
            else:
                print(f"‚ùå –¢–µ—Å—Ç '{test_name}' –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ")
        except Exception as e:
            print(f"üí• –¢–µ—Å—Ç '{test_name}' –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é: {e}")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç–∏
    print("\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {passed}/{total} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!")
        print("‚úÖ DataMCPServerAgent v2.0 –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")
        
        print("\nüåü –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞! –ú–æ–∂–µ—Ç–µ:")
        print("  ‚Ä¢ –ó–∞–ø—É—Å–∫–∞—Ç–∏ API —Å–µ—Ä–≤–µ—Ä")
        print("  ‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ CLI —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å") 
        print("  ‚Ä¢ –°—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Ç–∞ –∫–µ—Ä—É–≤–∞—Ç–∏ –∞–≥–µ–Ω—Ç–∞–º–∏")
        print("  ‚Ä¢ –í–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è")
        
    else:
        print("‚ö†Ô∏è –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π—à–ª–∏.")
        print("üîß –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ —Ç–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é.")
    
    show_next_steps()
    
    return 0 if passed == total else 1

if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\nüëã –†–æ–±–æ—Ç—É –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)
